div{컨텐츠$}*10
이때 $는 순차적으로 경과가 나오게끔 만들어준다.
 
padding: 20px 0   0    0
margin:   0  0    20px   0;
        위쪽 오른쪽 아래쪽  왼쪽
(위부터 시계방향)

margin : 상하  좌우 
margin:  20px   300px 

margin : 상하  자동으로 가로 중앙정렬
margin : 20px auto;

테두리를 둥글게 만드는 것
border-radius: 25px;

완전 구형으로 만들고 싶을때
border-radius: 50%;

//원으로 모양을 바뀌어도 영역은 사각형이다.
박스모델

-----------------------------------------------------------------------
Box Model
    HTML의 모든 요소는 일정한 영역을 차지하게 된다.
    CSS에서는 이런 영역을 Box Model이라고 한다.

박스 모델의 구성
    margin : 테두리 밖의 여백
    border : 테두리
    padding :테두리와 컨텐츠 사이의 여백
    contents : 컨텐츠의 영역

인라인 요소의 박스 모델도 margin, border, padding은 설정이 가능하지만
width, height를 사용할 수 없으므로 컨텐츠 영역의 크기를 설정할 수 없다.

#박스 모델 css 속성

-contents
width : 너비;
height : 높이;

-단위는 기본적으로 px이며 그 외에도 여러 단위가 있다.
-인라인 요소는 불가능하다.

-border
    border : 굵기 모양 색상;

-padding
    padding : 4방향;
    padding : 상하 좌우;
    padding : 상 좌우 하;
    padding : 상 우 하 좌;

-margin
    margin : 4방향;
    margin : 상하 좌우;
    margin : 상 좌우 하;
    margin : 상 우 하 좌;

-auto를 사용하면 요소를 중앙에 위치하게 할 수 있다.
-블록 요소를 세로로 배치하게 되면 margin이 중첩된다.(겹쳐진다.)
20px의 마진을 가진 요소들이 세로로 배치되면
각 요소들의 상하 간격이 40px이 아닌 20px 이다.

//인라인 요소는 height, width적용이 되지 않는다.
안라인 요소에서는 auto가 되지 않는다.

✨display 속성
    display 속성은 HTML에서 요소를 어떻게 표시할지 결정한다.
    HTML의 요소들은 기본적으로 display의 속성 값이 설정되어 있다.

    블록 요소 -> display : block
    인라인 요소 -> display : inline

    우리가 사용한 블록요소를 인라인으로 변경하고 싶다면
    display 속성의 값을 inline으로 변경하면 된다.

    ex) 개발자 도구에서 span 값도 display를 이용해
    block으로 만들수 있고 width등도 입력해서 바꿀 수 있다.

display 속성의 기본 4가지 값
    -none (display: none;) : 영역 자체가 사라짐.
        요소를 보이지 않게 설정한다.
        단순히 투명해지는 것이 아니라 아예 사라지게 되므로
        공간을 차지하지 않는다.
    -block
        블록 요소로 설정한다.
    -inline
        인라인 요소로 설정한다.
    -inline-block :inline과 block의 성질을 합쳐놓은 것이다.
        인라인 블록은 인라인과 블록의 특징을 섞어 놓은 요소이며,
        인라인처럼 컨텐츠 만큼만 영역을 차지하지만 
        블록처럼 컨텐츠의 너비, 높이를 변경할 수 있다.
        내부는 block요소, 외부는 inline 요소의 특징을 갖는다.

------------------------------------------------------------------------
span.span--inline{span$}*5
span 클래스로 만드는데 5줄로 만든다.

클래스 이름이 길면 CSS를 할때 도움이 된다.
설명하기 편하기 때문

#none (display: none;)
태그는 존재하지만 보이지만 않을뿐이다.
유용하게 쓰인다.
- ex) 네이버 배너에 생겼다 사라졌다 하는 메뉴를 만들때 사용한다.
============================================================================
✨✨✨display flex

레이아웃을 전문적으로 하는것.
block 과 inline으로만 짜기엔 복잡하므로 사용.

#레이아웃을 만들 때 사용하는 속성
    - float 
        //(많이 사용하지 않는다, 요소가 많아질 수록 꼬이기 시작,
        둥둥 띄워서 배치 , 그래서 다른요소와 겹치는 경우가 많아 사용x)
    - display의 flex
        //레이아웃을 짜기 위해 태어남! 사용하기도 배치하는 값을 도출하기도 편하다.

    - display의 grid
        // 진입장벽이 높다. 속성명도 복잡하다. 표와 비슷한 느낌으로 짜면
            그 안에 요소가 들어가서 크기가 다른 요소들을 배치하기에 
            편하다. 

#flexbox
    레이아웃을 만드는 하나의 방식이다.
    복잡하지 않게 유연하게 요소들의 크기와 순서를 정하여
    배치할 수 있다.

#flexbox의 구성
    - flex container
        레이아웃을 적용하여 배치하려는 요소들을 감싸는 부모요소
    - flex item
        실질적으로 배치하려는 요소이며 flex container의 자식 요소이다.
        자식 요소인 flex item은 여러개를 만들 수 있다.

    - 주축(main axis)
        자식 요소가 배치되는 방향이다.
    - 교차축(cross axis)
        주축을 가로지르는 방향이다.
    
(사진 참조 :memo\KakaoTalk_20231123_153326080.png )

배치하고 싶은 요소들을 정렬하려면
부모에 display: flex 를 주면 된다.

display: flex
교차축 : align-items: center;
 주축 :  justify-content: center;

center 말고도 사용하는 것
 //space-around: 일정간격 떨어짐, item들의 좌우 간격이 일정하다.
 //space-between : 양 끝단에 있는 item들을 content끝으로 붙인다.
//개발자 도구에서 flex옆 블록모양을 선택해서 원하는 정렬를 한다.
후의 copy all declarations를 클릭하여 적용한다. 


flex-direction  방향을 설정할 수 있다.
주축을 바꿔버린다.

flex 일때는 item의 width, height가 자동으로 줄어든다.(container에 맞춰야 하기 떄문)

만약에 크기를 조정하고 싶은데
두줄 배치로 바꾸고 싶다면 
flex-wrap: wrap;을 사용한다.

##flex container의 주요 속성

배치하려는 요소들의 전체 흐름, 정렬과 관련된 속성

-display
    display : flex
    flex container를 지정하는 속성
-flex-direction
    flex-direction : row | column;
    주축의 방향을 지정하는 속성

    1.row : 행방향
    2. column : 열 방향

-justify-content
    컨테이너의 주축을 기준을 아이템들을 정렬한다.

    1. center : 중앙정렬
    2. space-between : 첫 아이템과 마지막 아이템을 컨테이너 ㅕㅇ역의 
    양 끝에 배치하고 나머지 아이템들은 동일한 간격으로 정렬된다.
    3. space-around : 모든 아이템을 동일한 간격으로 정렬한다.

- align-items
    컨테이너의 교차축을 기준으로 정렬한다.
    justify-content와 속성값은 동일하다.
    
    1. center
    2. space-between
    3. space-around

- flex-wrap
    flex-wrap : nowrap | wrap;
    컨테이너 내부의 요소들이 많거나 크기가 커서 컨테이너를 넘어가게 되었을 때 한줄로 보여줄 것인지, 여러줄로 보여줄 것인지 지정한다.
    
    1. nowrap : flex-wrap의 기본값, 줄바꿈을 하지 않고 한줄로 보여준다.
    만약 컨테이너의 크기가 작다면 각각의 아이템의 크기가 줄어든다.
    2. wrap : 컨테이너의 크기가 작다면 여러줄로 보여준다.

# flex item의 속성
배치하는 각각의 자식 요소의 순서, 크기 등의 속성

- flex
- flex-grow
- flex-shrink
- flex-basis

등등이 있으나 활용도가 높지 않다.

=====================================================================
 <!-- p에 margin을 주지 않았지만 기본적으로 잡혀있다. -->
    <!-- 고로 style에 * 로 margin과 padding 을 0으로 만들고 시작한다.-->

#  %: 자식이 부모의 영역에서 얼마나 차지할 것인가
    width를 정할때 사용하면 유용

    단점 : 화면이 커졌을때 (부모사이즈가 변경되면)같이 변경된다.

반응형 웹사이트 : 사용자의 사용 툴에 따라서 크기가 변한다.
ex) 텀블벅 창 크기를 줄였다 키운다.


<exam06 참조>

li*5

a 태그 : inline 요소
li 태그 : block 요소 
li 때문에 세로 배치가 되는 것이다.

---------------------------------------------------------------------------------
Semantic 태그
    태그 자체적으로 의미가 있는 태그
    ex)h1 태그이면 제목 태그로 인식한다.
        검색 결과로 반영한다.

코드볼때 div가 많아서 헷갈릴 수 있다.
고로 ul, li 등을 div로 사용할 수 있지만 semantic 태그를 활용하면
구분하기 편하다.

-Semantic 태그의 종류
    - <header></header> : 페이지의 헤더 영역 표시
    - <footer></footer> : 회사 정보등을 담은 푸터 영역
    - <nav></nav> : 다른 페이지로 이동하는 요소를 담은 네비게이션 영역
    - <main></main> : 주 컨텐츠가 들어가는 영역
    - <aside></aside> : 주 내용과는 연관성이 낮은 분리된 영역, 주로 사이드바로 사용
    - <section></section> : 컨텐츠간 영역을 나눌 때 사용
    - <article></article> : 독립되고 반복적으로 재사용가능한 컨텐츠 영역
    등등...







